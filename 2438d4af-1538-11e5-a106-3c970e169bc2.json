{
  "vid": "2438d4af-1538-11e5-a106-3c970e169bc2",
  "topic": "cURL -- Multiple Vulnerability",
  "affects": [
    {
      "name": [
        "curl"
      ],
      "range": [
        {
          "lt": "7.43",
          "ge": "7.40"
        }
      ]
    }
  ],
  "description": {
    "xmlns": "http://www.w3.org/1999/xhtml",
    "text": "\n\t<p>cURL reports:</p>\n\t<blockquote cite=\"http://curl.haxx.se/docs/adv_20150617A.html\">\n\t  <p>libcurl can wrongly send HTTP credentials when re-using\n\t    connections.</p>\n\t  <p>libcurl allows applications to set credentials for the\n\t    upcoming transfer with HTTP Basic authentication, like\n\t    with CURLOPT_USERPWD for example. Name and password.\n\t    Just like all other libcurl options the credentials\n\t    are sticky and are kept associated with the \"handle\"\n\t    until something is made to change the situation.</p>\n\t  <p>Further, libcurl offers a curl_easy_reset() function\n\t    that resets a handle back to its pristine state in\n\t    terms of all settable options. A reset is of course\n\t    also supposed to clear the credentials. A reset is\n\t    typically used to clear up the handle and prepare\n\t    it for a new, possibly unrelated, transfer.</p>\n\t  <p>Within such a handle, libcurl can also store a\n\t    set of previous connections in case a second transfer\n\t    is requested to a host name for which an existing\n\t    connection is already kept alive.</p>\n\t  <p>With this flaw present, using the handle even\n\t    after a reset would make libcurl accidentally use\n\t    those credentials in a subsequent request if done\n\t    to the same host name and connection as was\n\t    previously accessed.</p>\n\t  <p>An example case would be first requesting a password\n\t    protected resource from one section of a web site, and\n\t    then do a second request of a public resource from a\n\t    completely different part of the site without\n\t    authentication. This flaw would then inadvertently\n\t    leak the credentials in the second request.</p>\n\t</blockquote>\n\t<blockquote cite=\"http://curl.haxx.se/docs/adv_20150617B.html\">\n\t  <p>libcurl can get tricked by a malicious SMB server to\n\t    send off data it did not intend to.</p>\n\t  <p>In libcurl's state machine function handling the SMB\n\t    protocol (smb_request_state()), two length and offset\n\t    values are extracted from data that has arrived over\n\t    the network, and those values are subsequently used\n\t    to figure out what data range to send back.</p>\n\t  <p>The values are used and trusted without boundary\n\t    checks and are just assumed to be valid. This allows\n\t    carefully handcrafted packages to trick libcurl\n\t    into responding and sending off data that was not\n\t    intended. Or just crash if the values cause libcurl\n\t    to access invalid memory.</p>\n\t</blockquote>\n      "
  },
  "references": {
    "url": [
      "http://curl.haxx.se/docs/adv_20150617A.html",
      "http://curl.haxx.se/docs/adv_20150617B.html"
    ],
    "cvename": [
      "CVE-2015-3236",
      "CVE-2015-3237"
    ]
  },
  "dates": {
    "discovery": "2015-06-17",
    "entry": "2015-06-17"
  }
}
