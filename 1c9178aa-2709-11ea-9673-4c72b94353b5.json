{
	"vid": "1c9178aa-2709-11ea-9673-4c72b94353b5",
	"topic": "typo3 -- multiple vulnerabilities",
	"affects": [
		{
			"name": [
				"typo3-8"
			],
			"range": [
				{
					"lt": "8.7.30"
				}
			]
		},
		{
			"name": [
				"typo3-9"
			],
			"range": [
				{
					"lt": "9.5.13"
				}
			]
		}
	],
	"description": {
		"xmlns": "http://www.w3.org/1999/xhtml",
		"text": "\n\t<p>Typo3 core team reports:</p>\n\t<blockquote cite=\"https://typo3.org/article/typo3-10-2-1-9-5-12-and-8-7-30-security-releases-published\">\n\t  <p>It has been discovered that the output of field validation errors in the Form Framework is vulnerable\n\t    to cross-site scripting.</p>\n\t  <p>It has been discovered that t3:// URL handling and typolink functionality are vulnerable to cross-site\n\t    scripting. Not only regular backend forms are affected but also frontend extensions which use the rendering\n\t    with typolink.</p>\n\t  <p>It has been discovered that the output table listing in the Files backend module is vulnerable to cross-site\n\t    scripting when a file extension contains malicious sequences. Access to the file system of the server - either\n\t    directly or through synchronization - is required to exploit the vulnerability.</p>\n\t  <p>It has been discovered that the extraction of manually uploaded ZIP archives in Extension Manager is vulnerable\n\t    to directory traversal. Admin privileges are required in order to exploit this vulnerability. Since TYPO3 v9 LTS,\n\t    System Maintainer privileges are required as well.</p>\n\t  <p>Failing to properly escape user submitted content, class QueryGenerator is vulnerable to SQL injection.\n\t    Having system extension ext:lowlevel installed and a valid backend user having administrator privileges are\n\t    required to exploit this vulnerability.</p>\n\t  <p>It has been discovered that classes QueryGenerator and QueryView are vulnerable to insecure deserialization.\n\t    Requirements for successfully exploiting this vulnerability (one of the following):\n\t    - having system extension ext:lowlevel (Backend Module: DB Check) installed and valid backend user having\n\t    administrator privileges\n\t    - having system extension ext:sys_action installed and valid backend user having limited privileges</p>\n\t  <p>TYPO3 allows to upload files either in the backend user interface as well as in custom developed extensions.\n\t    To reduce the possibility to upload potential malicious code TYPO3 uses the fileDenyPattern to deny e.g. user\n\t    submitted PHP scripts from being persisted. Besides that it is possible for any editor to upload file assets\n\t    using the file module (fileadmin) or changing their avatar image shown in the TYPO3 backend.\n\n\t    Per default TYPO3 allows to upload and store HTML and SVG files as well using the mentioned functionalities.\n\t    Custom extension implementations probably would also accept those files when only the fileDenyPattern is evaluated.\n\n\t    Since HTML and SVG files - which might contain executable JavaScript code per W3C standard - could be directly\n\t    displayed in web clients, the whole web application is exposed to be vulnerable concerning Cross-Site Scripting.\n\t    Currently the following scenarios are known - given an authenticated regular editor is able to upload files using\n\t    the TYPO3 backend:\n\t    - directly target a potential victim to a known public resource in a URL, e.g. /fileadmin/malicious.svg or\n\t    /fileadmin/malicious.html\n\t    - using the TypoScript content object “SVG” (implemented in class ScalableVectorGraphicsContentObject)\n\t    having renderMode set to inline for SVG files (available since TYPO3 v9.0)\n\t    - custom implementations that directly output and render markup of HTML and SVG files\n\n\t    SVG files that are embedded using an img src=”malicious.svg” tag are not vulnerable since potential\n\t    scripts are not executed in these scenarios (see https://www.w3.org/wiki/SVG_Security). The icon API of TYPO3\n\t    is not scope of this announcement since SVG icons need to be registered using an individual implementation,\n\t      which is not considered as user submitted content.</p>\n\t    <p>It has been discovered that request handling in Extbase can be vulnerable to insecure deserialization.\n\t      User submitted payload has to be signed with a corresponding HMAC-SHA1 using the sensitive TYPO3 encryptionKey\n\t      as secret - invalid or unsigned payload is not deserialized.\n\n\t      However, since sensitive information could have been leaked by accident (e.g. in repositories or in commonly\n\t      known and unprotected backup files), there is the possibility that attackers know the private encryptionKey\n\t      and are able to calculate the required HMAC-SHA1 to allow a malicious payload to be deserialized.\n\n\t      Requirements for successfully exploiting this vulnerability (all of the following):\n\t      - rendering at least one Extbase plugin in the frontend\n\t      - encryptionKey has been leaked (from LocalConfiguration.php or corresponding .env file). </p>\n\t</blockquote>\n      "
	},
	"references": {
		"url": [
			"https://typo3.org/security/advisory/typo3-core-sa-2019-021/",
			"https://typo3.org/security/advisory/typo3-core-sa-2019-022/",
			"https://typo3.org/security/advisory/typo3-core-sa-2019-023/",
			"https://typo3.org/security/advisory/typo3-core-sa-2019-024/",
			"https://typo3.org/security/advisory/typo3-core-sa-2019-025/",
			"https://typo3.org/security/advisory/typo3-core-sa-2019-026/",
			"https://typo3.org/security/advisory/typo3-psa-2019-010/",
			"https://typo3.org/security/advisory/typo3-psa-2019-011/"
		]
	},
	"dates": {
		"discovery": "2019-12-17",
		"entry": "2019-12-25"
	}
}
