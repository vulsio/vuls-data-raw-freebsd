{
	"vid": "8db24888-b2f5-11e6-8153-00248c0c745d",
	"topic": "Drupal Code -- Multiple Vulnerabilities",
	"affects": [
		{
			"name": [
				"drupal7"
			],
			"range": [
				{
					"lt": "7.52",
					"ge": "7.0"
				}
			]
		},
		{
			"name": [
				"drupal8"
			],
			"range": [
				{
					"lt": "8.2.3",
					"ge": "8.0.0"
				}
			]
		}
	],
	"description": {
		"xmlns": "http://www.w3.org/1999/xhtml",
		"text": "\n\t<p>The Drupal development team reports:</p>\n\t<blockquote cite=\"https://www.drupal.org/SA-CORE-2016-005\">\n\t  <h3>Inconsistent name for term access query (Less critical - Drupal\n\t    7 and Drupal 8)</h3>\n\t  <p>Drupal provides a mechanism to alter database SELECT queries before\n\t    they are executed. Contributed and custom modules may use this\n\t    mechanism to restrict access to certain entities by implementing\n\t    hook_query_alter() or hook_query_TAG_alter() in order to add\n\t    additional conditions. Queries can be distinguished by means of\n\t    query tags. As the documentation on EntityFieldQuery::addTag()\n\t    suggests, access-tags on entity queries normally follow the form\n\t    ENTITY_TYPE_access (e.g. node_access). However, the taxonomy\n\t    module's access query tag predated this system and used term_access\n\t    as the query tag instead of taxonomy_term_access.</p>\n\t  <p>As a result, before this security release modules wishing to\n\t    restrict access to taxonomy terms may have implemented an\n\t    unsupported tag, or needed to look for both tags (term_access and\n\t    taxonomy_term_access) in order to be compatible with queries\n\t    generated both by Drupal core as well as those generated by\n\t    contributed modules like Entity Reference. Otherwise information\n\t    on taxonomy terms might have been disclosed to unprivileged users.\n\t    </p>\n\t  <h3>Incorrect cache context on password reset page (Less critical -\n\t    Drupal 8)</h3>\n\t  <p>The user password reset form does not specify a proper cache\n\t    context, which can lead to cache poisoning and unwanted content on\n\t    the page.</p>\n\t  <h3>Confirmation forms allow external URLs to be injected (Moderately\n\t    critical - Drupal 7)</h3>\n\t  <p>Under certain circumstances, malicious users could construct a URL\n\t    to a confirmation form that would trick users into being redirected\n\t    to a 3rd party website after interacting with the form, thereby\n\t    exposing the users to potential social engineering attacks.</p>\n\t  <h3>Denial of service via transliterate mechanism (Moderately critical\n\t    - Drupal 8)</h3>\n\t  <p>A specially crafted URL can cause a denial of service via the\n\t    transliterate mechanism.</p>\n\t</blockquote>\n      "
	},
	"references": {
		"cvename": [
			"CVE-2016-9449",
			"CVE-2016-9450",
			"CVE-2016-9451",
			"CVE-2016-9452"
		]
	},
	"dates": {
		"discovery": "2016-11-16",
		"entry": "2016-11-25",
		"modified": "2016-11-27"
	}
}
