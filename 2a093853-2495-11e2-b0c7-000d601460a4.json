{
  "vid": "2a093853-2495-11e2-b0c7-000d601460a4",
  "topic": "ruby -- $SAFE escaping vulnerability about Exception#to_s/NameError#to_s",
  "affects": [
    {
      "name": [
        "ruby"
      ],
      "range": [
        {
          "lt": "1.8.7.371,1",
          "gt": "1.8.7,1"
        },
        {
          "lt": "1.9.3.286,1",
          "gt": "1.9.3,1"
        }
      ]
    }
  ],
  "description": {
    "xmlns": "http://www.w3.org/1999/xhtml",
    "text": "\n\t<p>The official ruby site reports:</p>\n\t<blockquote cite=\"http://www.ruby-lang.org/en/news/2012/10/12/cve-2012-4464-cve-2012-4466/\">\n\t  <p>Vulnerabilities found for Exception#to_s, NameError#to_s, and\n\t    name_err_mesg_to_s() which is Ruby interpreter-internal API. A\n\t    malicious user code can bypass $SAFE check by utilizing one of\n\t    those security holes.</p>\n\t  <p>Ruby's $SAFE mechanism enables untrusted user codes to run in\n\t    $SAFE &gt;= 4 mode. This is a kind of sandboxing so some operations\n\t    are restricted in that mode to protect other data outside the\n\t    sandbox.</p>\n\t  <p>The problem found was around this mechanism. Exception#to_s,\n\t    NameError#to_s, and name_err_mesg_to_s() interpreter-internal API\n\t    was not correctly handling the $SAFE bits so a String object which\n\t    is not tainted can destructively be marked as tainted using them.\n\t    By using this an untrusted code in a sandbox can modify a\n\t    formerly-untainted string destructively.</p>\n\t  <p>Ruby 1.8 once had a similar security issue. It fixed\n\t    Exception#to_s and NameError#to_s, but name_err_mesg_to_str() issue\n\t    survived previous security fix</p>\n\t</blockquote>\n      "
  },
  "references": {
    "url": [
      "http://www.ruby-lang.org/en/news/2012/10/12/cve-2012-4464-cve-2012-4466/",
      "https://access.redhat.com/security/cve/CVE-2012-4464/"
    ],
    "cvename": [
      "CVE-2012-4464",
      "CVE-2012-4466"
    ]
  },
  "dates": {
    "discovery": "2012-08-21",
    "entry": "2012-11-01"
  }
}
