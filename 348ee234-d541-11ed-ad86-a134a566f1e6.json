{
	"vid": "348ee234-d541-11ed-ad86-a134a566f1e6",
	"topic": "go -- multiple vulnerabilities",
	"affects": [
		{
			"name": [
				"go119"
			],
			"range": [
				{
					"lt": "1.19.8"
				}
			]
		},
		{
			"name": [
				"go120"
			],
			"range": [
				{
					"lt": "1.20.3"
				}
			]
		}
	],
	"description": {
		"xmlns": "http://www.w3.org/1999/xhtml",
		"text": "\n\t<p>The Go project reports:</p>\n\t<blockquote cite=\"https://go.dev/issue/59180\">\n\t  <p>go/parser: infinite loop in parsing</p>\n\t  <p>Calling any of the Parse functions on Go source code\n\t    which contains //line directives with very large line\n\t    numbers can cause an infinite loop due to integer\n\t    overflow.</p>\n\t</blockquote>\n\t<blockquote cite=\"https://go.dev/issue/59234\">\n\t  <p>html/template: backticks not treated as string delimiters</p>\n\t  <p>Templates did not properly consider backticks (`) as\n\t    Javascript string delimiters, and as such did not escape\n\t    them as expected. Backticks are used, since ES6, for JS\n\t    template literals. If a template contained a Go template\n\t    action within a Javascript template literal, the contents\n\t    of the action could be used to terminate the literal,\n\t    injecting arbitrary Javascript code into the Go template.\n\t    As ES6 template literals are rather complex, and\n\t    themselves can do string interpolation, we've decided\n\t    to simply disallow Go template actions from being used\n\t    inside of them (e.g. \"var a = {{.}}\"), since there is no\n\t    obviously safe way to allow this behavior. This takes the\n\t    same approach as github.com/google/safehtml.\n\t    Template.Parse will now return an Error when it encounters\n\t    templates like this, with a currently unexported ErrorCode\n\t    with a value of 12. This ErrorCode will be exported in the\n\t    next major release.</p>\n\t</blockquote>\n\t<blockquote cite=\"https://go.dev/issue/58975\">\n\t  <p>net/http, net/textproto: denial of service from excessive\n\t    memory allocation</p>\n\t  <p>HTTP and MIME header parsing could allocate large\n\t    amounts of memory, even when parsing small inputs.\n\t    Certain unusual patterns of input data could cause the\n\t    common function used to parse HTTP and MIME headers to\n\t    allocate substantially more memory than required to hold\n\t    the parsed headers. An attacker can exploit this\n\t    behavior to cause an HTTP server to allocate large\n\t    amounts of memory from a small request, potentially\n\t    leading to memory exhaustion and a denial of service.\n\t    Header parsing now correctly allocates only the memory\n\t    required to hold parsed headers.</p>\n\t</blockquote>\n\t<blockquote cite=\"https://go.dev/issue/59153\">\n\t  <p>net/http, net/textproto, mime/multipart: denial of service\n\t    from excessive resource consumption</p>\n\t  <p>Multipart form parsing can consume large amounts of CPU\n\t    and memory when processing form inputs containing very\n\t    large numbers of parts. This stems from several causes:\n\t    mime/multipart.Reader.ReadForm limits the total memory a\n\t    parsed multipart form can consume. ReadForm could\n\t    undercount the amount of memory consumed, leading it to\n\t    accept larger inputs than intended. Limiting total\n\t    memory does not account for increased pressure on the\n\t    garbage collector from large numbers of small\n\t    allocations in forms with many parts. ReadForm could\n\t    allocate a large number of short-lived buffers, further\n\t    increasing pressure on the garbage collector. The\n\t    combination of these factors can permit an attacker to\n\t    cause an program that parses multipart forms to consume\n\t    large amounts of CPU and memory, potentially resulting\n\t    in a denial of service. This affects programs that use\n\t    mime/multipart.Reader.ReadForm, as well as form parsing\n\t    in the net/http package with the Request methods\n\t    FormFile, FormValue, ParseMultipartForm, and\n\t    PostFormValue. ReadForm now does a better job of\n\t    estimating the memory consumption of parsed forms, and\n\t    performs many fewer short-lived allocations. In\n\t    addition, mime/multipart.Reader now imposes the\n\t    following limits on the size of parsed forms: Forms\n\t    parsed with ReadForm may contain no more than 1000\n\t    parts. This limit may be adjusted with the environment\n\t    variable GODEBUG=multipartmaxparts=. Form parts parsed\n\t    with NextPart and NextRawPart may contain no more than\n\t    10,000 header fields. In addition, forms parsed with\n\t    ReadForm may contain no more than 10,000 header fields\n\t    across all parts. This limit may be adjusted with the\n\t    environment variable GODEBUG=multipartmaxheaders=.</p>\n\t</blockquote>\n      "
	},
	"references": {
		"url": [
			"https://groups.google.com/g/golang-dev/c/P-sOFU28bj0/m/QE_cqf22AgAJ"
		],
		"cvename": [
			"CVE-2023-24537",
			"CVE-2023-24538",
			"CVE-2023-24534",
			"CVE-2023-24536"
		]
	},
	"dates": {
		"discovery": "2023-04-04",
		"entry": "2023-04-07"
	}
}
