{
  "vid": "5a45649a-4777-11ea-bdec-08002728f74c",
  "topic": "Django -- potential SQL injection vulnerability",
  "affects": [
    {
      "name": [
        "py27-django111",
        "py35-django111",
        "py36-django111",
        "py37-django111",
        "py38-django111"
      ],
      "range": [
        {
          "lt": "1.11.28"
        }
      ]
    },
    {
      "name": [
        "py35-django22",
        "py36-django22",
        "py37-django22",
        "py38-django22"
      ],
      "range": [
        {
          "lt": "2.2.10"
        }
      ]
    },
    {
      "name": [
        "py36-django30",
        "py37-django30",
        "py38-django30"
      ],
      "range": [
        {
          "lt": "3.0.3"
        }
      ]
    }
  ],
  "description": {
    "xmlns": "http://www.w3.org/1999/xhtml",
    "text": "\n\t<p>MITRE CVE reports:</p>\n\t<blockquote cite=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7471\">\n\t  <p>Django 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3\n\t    allows SQL Injection if untrusted data is used as a StringAgg delimiter\n\t    (e.g., in Django applications that offer downloads of data as a series\n\t    of rows with a user-specified column delimiter). By passing a suitably\n\t    crafted delimiter to a contrib.postgres.aggregates.StringAgg instance,\n\t    it was possible to break escaping and inject malicious SQL.</p>\n\t</blockquote>\n      "
  },
  "references": {
    "url": [
      "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7471",
      "https://docs.djangoproject.com/en/1.11/releases/1.11.28/",
      "https://docs.djangoproject.com/en/2.2/releases/2.2.10/",
      "https://docs.djangoproject.com/en/3.0/releases/3.0.3/"
    ],
    "cvename": [
      "CVE-2020-7471"
    ]
  },
  "dates": {
    "discovery": "2020-02-03",
    "entry": "2020-02-04"
  }
}
