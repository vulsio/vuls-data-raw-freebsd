{
	"vid": "9b4facec-6761-11da-99f6-00123ffe8333",
	"topic": "curl -- URL buffer overflow vulnerability",
	"affects": [
		{
			"name": [
				"curl"
			],
			"range": [
				{
					"lt": "7.15.1",
					"ge": "7.11.2"
				}
			]
		}
	],
	"description": {
		"xmlns": "http://www.w3.org/1999/xhtml",
		"text": "\n\t<p>A Project cURL Security Advisory reports:</p>\n\t<blockquote cite=\"http://curl.haxx.se/docs/adv_20051207.html\">\n\t  <p>libcurl's URL parser function can overflow a malloced\n\t    buffer in two ways, if given a too long URL.</p>\n\t  <p>1 - pass in a URL with no protocol (like \"http://\")\n\t    prefix, using no slash and the string is 256 bytes or\n\t    longer. This leads to a single zero byte overflow of the\n\t    malloced buffer.</p>\n\t  <p>2 - pass in a URL with only a question mark as separator\n\t    (no slash) between the host and the query part of the URL.\n\t    This leads to a single zero byte overflow of the malloced\n\t    buffer.</p>\n\t  <p>Both overflows can be made with the same input string,\n\t    leading to two single zero byte overwrites.</p>\n\t  <p>The affected flaw cannot be triggered by a redirect, but\n\t    the long URL must be passed in \"directly\" to libcurl. It\n\t    makes this a \"local\" problem. Of course, lots of programs\n\t    may still pass in user-provided URLs to libcurl without doing\n\t    much syntax checking of their own, allowing a user to exploit\n\t    this vulnerability.</p>\n\t</blockquote>\n      "
	},
	"references": {
		"url": [
			"http://curl.haxx.se/docs/adv_20051207.html",
			"http://www.hardened-php.net/advisory_242005.109.html",
			"http://secunia.com/advisories/17907/"
		],
		"cvename": [
			"CVE-2005-4077"
		],
		"bid": [
			"15756"
		]
	},
	"dates": {
		"discovery": "2005-12-07",
		"entry": "2005-12-09",
		"modified": "2006-01-01"
	}
}
